name: 自动版本升级与发布

on:
  push:
    branches:
      - publish
  workflow_dispatch:
    inputs:
      version_type:
        description: "版本升级类型 (major, minor, patch)"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch

# 明确定义工作流需要的权限
permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          # 确保获取完整的 git 历史，以便正确更新版本
          fetch-depth: 0
          # 使用个人访问令牌 (PAT) 而不是默认的 GITHUB_TOKEN
          token: ${{ secrets.GH_PAT }}
          # 如果您没有设置 GH_PAT，请创建一个具有 repo 权限的个人访问令牌
          # 并将其添加到仓库的 Secrets 中

      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8 # 使用最新的 pnpm v8，您可以根据需要调整版本

      - name: 配置 Git 用户
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions-bot@users.noreply.github.com"

      - name: 安装依赖
        run: pnpm install --frozen-lockfile
        # 添加 --frozen-lockfile 参数确保不会修改 pnpm-lock.yaml

      - name: 确定版本升级类型
        id: version_type
        run: |
          # 如果是通过 workflow_dispatch 触发，则使用输入的版本类型
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION_TYPE=${{ github.event.inputs.version_type }}" >> $GITHUB_ENV
          else
            # 从 package.json 读取升级策略
            UPGRADE_STRATEGY=$(node -e "try { const pkg = require('./package.json'); console.log(pkg.upgrade || 'patch'); } catch(e) { console.log('patch'); }")
            
            # 验证升级策略是否有效
            if [[ "$UPGRADE_STRATEGY" != "major" && "$UPGRADE_STRATEGY" != "minor" && "$UPGRADE_STRATEGY" != "patch" ]]; then
              echo "package.json 中的 upgrade 字段值无效: $UPGRADE_STRATEGY，将使用默认值 'patch'"
              UPGRADE_STRATEGY="patch"
            fi
            
            echo "从 package.json 中读取升级策略: $UPGRADE_STRATEGY"
            echo "VERSION_TYPE=$UPGRADE_STRATEGY" >> $GITHUB_ENV
          fi

      - name: 升级版本号
        run: |
          # 使用 pnpm 的版本命令升级版本号
          pnpm version ${{ env.VERSION_TYPE }} -m "Bump version to %s [skip ci]"

      - name: 构建项目
        run: pnpm run build

      - name: 推送版本变更到 GitHub
        run: |
          # 确保使用正确的凭据推送
          git push origin HEAD:publish
          git push --tags

      - name: 发布到 NPM
        run: pnpm publish --no-git-checks
        env:
          # 这里需要设置 NPM 的认证 token
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
